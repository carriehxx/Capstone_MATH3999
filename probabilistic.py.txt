import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge

step_length = np.array([])
error = np.array([])

T = 1.0
N_set = [20,30,40,50, 80, 100]
num_paths = 100000
a = 0.04
a_bar = 0.09
mu = -0.2
mu_bar = 0.2
sigma_ref = np.sqrt(a)

for N in N_set:
  print(f"current step length = {T/N:.4f}")
  h = T / N
  X = np.zeros((N + 1, num_paths))
  A = np.zeros((N + 1, num_paths))
  for k in range(N):
      dW = np.sqrt(h) * np.random.randn(num_paths)
      X[k+1] = X[k] + sigma_ref * dW
      A[k+1] = A[k] + (X[k] + X[k+1]) * h / 2

  u = np.zeros_like(X)
  u[-1] = np.cos(X[-1] + A[-1])
  print(u[-1].mean())

  for k in range(N-1, -1, -1):
      # print(f"Time step {k}")
      X_k, A_k = X[k], A[k]
      X_k_next, A_k_next = X[k+1], A[k+1]
      u_next = u[k+1]

      dW = (X_k_next - X_k)/sigma_ref
      sigma_inverse = 1/sigma_ref
      H_1 = sigma_inverse * dW / h
      H_2 = sigma_inverse**2 * (dW**2 - h) / h**2

      if k == 1:
          design = np.column_stack([np.ones_like(X_k), X_k, X_k**2])
      else:
          design = np.column_stack([
              np.ones_like(X_k),
              X_k,
              A_k,
              X_k * A_k,
              X_k**2,
              A_k**2
          ])

      if k == 0:
        E_u_next = u_next.mean()
        E_H1 = (u_next * H_1).mean()
        E_H2 = (u_next * H_2).mean()
      else:
        # model_u = LinearRegression(fit_intercept=False).fit(design, u_next)
        model_u = Ridge(alpha=1e-2, fit_intercept=False).fit(design, u_next)
        E_u_next = model_u.predict(design)

        # model_H1 = LinearRegression(fit_intercept=False).fit(design,  u_next * H_1)
        model_H1 = Ridge(alpha=1e-2, fit_intercept=False).fit(design,  u_next * H_1)
        E_H1 = model_H1.predict(design)

        # model_H2 = LinearRegression(fit_intercept=False).fit(design, u_next * H_2)
        model_H2 = Ridge(alpha=1e-2, fit_intercept=False).fit(design, u_next * H_2)
        E_H2 = model_H2.predict(design)

      z = E_H1
      gamma = E_H2
      f_val = (
          - (X_k - mu) * np.maximum(-np.sin(X_k - A_k), 0)
          + (X_k + mu_bar) * np.maximum(np.sin(X_k - A_k), 0)
          + (a/2) * np.maximum(np.cos(X_k - A_k), 0)
          - (a_bar/2) * np.maximum(-np.cos(X_k - A_k), 0)
      )

      max_a_term = np.where(gamma >= 0, a_bar * gamma, a * gamma) / 2
      min_mu = np.where(z >= 0, mu * z, mu_bar * z)
      F_total = (min_mu + max_a_term + f_val) - 0.5 * sigma_ref**2 * gamma

      u[k] = E_u_next + h * F_total
      print(f"Mean u[{k}]: {u[k].mean():.6f}")

  print(f"Approximate solution at t=0: {u[0].mean():.6f}")
  print(f"Numerical error: {abs(u[0].mean() - 1):.6f}")
  step_length = np.append(step_length, T/N)
  error = np.append(error, abs(u[0].mean() - 1))